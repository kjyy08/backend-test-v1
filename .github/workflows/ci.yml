name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

permissions:
  contents: write
  checks: write
  pull-requests: write
  issues: write

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 22
        uses: actions/setup-java@v5
        with:
          java-version: '22'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with linting
        run: |
          ./gradlew ktlintCheck test

      - name: Comment PR with test results
        uses: dorny/test-reporter@v2
        if: github.event_name == 'pull_request' && !cancelled()
        with:
          name: Test Results
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false
          fail-on-empty: false

  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 22
        uses: actions/setup-java@v5
        with:
          java-version: '22'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment status
        run: |
          echo "🐳 Docker 이미지 빌드 및 푸시 완료"
          echo "📦 이미지: ${{ steps.meta.outputs.tags }}"
          echo "🔗 Registry: https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }}"